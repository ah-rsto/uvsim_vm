MODULE NAME

Model

DESCRIPTION

This module manages the data model components.

CLASSES

- builtins.object
- DataModel

  class DataModel(builtins.object)
  |  Manager for main memory and register objects.
  |
  |  Methods defined here:
  |
  |  **init**(self)
  |    DataModel initializer.
  |
  |    :param: None
  |    :return: None
  |
  |  get_accumulator(self) -> int
  |    Gets value of accumulator register.
  |
  |    :param: None
  |    :return: self.accumulator: Value in accumulator register
  |
  |  get_instruction(self, idx: int) -> int
  |    Gets instruction at specified memory index.
  |
  |    :param idx: Index value for main memory
  |    :return: self.memory[idx]: Instruction from memory
  |
  |  get_instructions(self) -> list
  |    Gets instruction set in memory.
  |
  |    :param: None
  |    :return: self.memory: Instruction set from memory
  |
  |  load_program(self, filename: str) -> None
  |    Loads program instructions from file.
  |
  |    :param filename: String containing file path
  |    :return: None
  |
  |  reset_accumulator(self) -> None
  |    Resets accumulator register.
  |
  |    :param: None
  |    :return: None
  |
  |  save_program(self, filename: str) -> None
  |    Saves modified program to file. INCOMPLETE
  |
  |    :param filename: String containing file path
  |    :return: None
  |
  |  set_accumulator(self, value: int) -> None
  |    Sets value of accumulator register.
  |
  |    :param value: New value for accumulator register
  |    :return: None
  |
  |  set_instruction(self, idx, value: int) -> None
  |    Sets instruction at specific memory index.
  |
  |    :param idx: Index value for main memory
  |    :param value: New value for instruction
  |    :return: None
  |
  |  set_instructions(self, value: int) -> None
  |    Sets instruction set in memory.
  |
  |    :param value: New value for instruction set
  |    :return: None
  |
  |  ----------------------------------------------------------------------
  |  Data descriptors defined here:
  |
  |  **dict**
  |    dictionary for instance variables (if defined)
  |
  |  **weakref**
  |    list of weak references to the object (if defined)

---

MODULE NAME

Controller

DESCRIPTION

This module manages the controller components.

CLASSES

- builtins.object
- ArithmeticController
- UVSimController(ArithmeticController, BranchController)
- BranchController

  class ArithmeticController(builtins.object)
  |  Manager for arithmetic operations.
  |
  |  Methods defined here:
  |
  |  addition(self, accumulator, instruction_set, instruction_idx) -> int
  |    Adds designated memory value to accumulator.
  |
  |    :param accumulator: Value in accumulator register
  |    :param instruction_set: Instruction set from memory
  |    :param instruction_idx: Instruction index in memory
  |    :return solution: Sum of accumulator and memory value
  |
  |  division(self, accumulator, instruction_set, instruction_idx) -> int
  |    Divides accumulator by designated memory value.
  |
  |    :param accumulator: Value in accumulator register
  |    :param instruction_set: Instruction set from memory
  |    :param instruction_idx: Instruction index in memory
  |    :return solution: Quotient of accumulator dividend and memory value
  |
  |  multiplication(self, accumulator, instruction_set, instruction_idx) -> int
  |    Multiplies designated memory value with accumulator.
  |
  |    :param accumulator: Value in accumulator register
  |    :param instruction_set: Instruction set from memory
  |    :param instruction_idx: Instruction index in memory
  |    :return solution: Product of accumulator and memory value
  |
  |  subtraction(self, accumulator, instruction_set, instruction_idx) -> int
  |    Subtracts designated memory value from accumulator.
  |
  |    :param accumulator: Value in accumulator register
  |    :param instruction_set: Instruction set from memory
  |    :param instruction_idx: Instruction index in memory
  |    :return solution: Difference of accumulator and memory value
  |
  |  ----------------------------------------------------------------------
  |  Data descriptors defined here:
  |
  |  **dict**
  |    dictionary for instance variables (if defined)
  |
  |  **weakref**
  |    list of weak references to the object (if defined)

  class BranchController(builtins.object)
  |  Manager for branch operations.
  |
  |  Methods defined here:
  |
  |  branch(self, instruction_idx) -> int
  |    Sets runtime cursor to new position.
  |
  |    :param instruction_idx: Instruction index in memory
  |    :return cursor: New position in instruction set runtime
  |
  |  branch_negative(self, cursor, accumulator, instruction_idx) -> int
  |    Sets runtime cursor to new position if accumulator is negative.
  |
  |    :param cursor: Current position in instruction set runtime
  |    :param accumulator: Value in accumulator register
  |    :param instruction_idx: Instruction index in memory
  |    :return cursor: New position in instruction set runtime
  |
  |  branch_zero(self, cursor, accumulator, instruction_idx) -> int
  |    Sets runtime cursor to new position if accumulator is zero.
  |
  |    :param cursor: Current position in instruction set runtime
  |    :param accumulator: Value in accumulator register
  |    :param instruction_idx: Instruction index in memory
  |    :return cursor: New position in instruction set runtime
  |
  |  halt(self, halted, instruction_idx) -> int
  |    Prints statement after program runtime completion.
  |
  |    :param halted: Callback function for ui
  |    :param instruction_idx: Instruction index in memory
  |    :param instruction_idx: Instruction index in memory
  |    :return cursor: Final position in instruction set runtime
  |
  |  ----------------------------------------------------------------------
  |  Data descriptors defined here:
  |
  |  **dict**
  |    dictionary for instance variables (if defined)
  |
  |  **weakref**
  |    list of weak references to the object (if defined)

  class UVSimController(ArithmeticController, BranchController)
  |  UVSimController(halted, display_values=None)
  |
  |  Manager for application runtime.
  |
  |  Method resolution order:
  |    UVSimController
  |    ArithmeticController
  |    BranchController
  |    builtins.object
  |
  |  Methods defined here:
  |
  |  **init**(self, halted, display_values=None)
  |    UVSimController initializer.
  |
  |    :param halted: Halted callback function for ui
  |    :param display_values: Display value callback function for ui
  |    :return: None
  |
  |  execute_program(self, read_from_user, write_to_console) -> None
  |    Executes main runtime loop and instruction validation.
  |
  |    :param read_from_user: Input callback function for ui
  |    :param write_to_console: Output callback function for ui
  |    :return: None
  |
  |  get_acc_cur(self) -> tuple[str, str]
  |    Requests and formats accumulator and cursor values.
  |
  |    :param: None
  |    :return program_text: Formatted accumulator and cursor for ui
  |
  |  get_program_text(self) -> str
  |    Requests and formats instruction set from data model.
  |
  |    :param: None
  |    :return program_text: Formatted instruction and index for ui
  |
  |  load_program(self, filename) -> None
  |    Requests data model program load from file
  |
  |    :param filename: String containing file path
  |    :return: None
  |
  |  reset_accumulator(self) -> None
  |    Requests data model accumulator reset.
  |
  |    :param: None
  |    :return: None
  |
  |  reset_cursor(self) -> None
  |    Resets position in instruction set runtime
  |
  |    :param: None
  |    :return: None
  |
  |  reset_instruction(self) -> None
  |    Resets initial instruction assignment
  |
  |    :param: None
  |    :return: None
  |
  |  ----------------------------------------------------------------------
  |  Methods inherited from ArithmeticController:
  |
  |  addition(self, accumulator, instruction_set, instruction_idx) -> int
  |    Adds designated memory value to accumulator.
  |
  |    :param accumulator: Value in accumulator register
  |    :param instruction_set: Instruction set from memory
  |    :param instruction_idx: Instruction index in memory
  |    :return solution: Sum of accumulator and memory value
  |
  |  division(self, accumulator, instruction_set, instruction_idx) -> int
  |    Divides accumulator by designated memory value.
  |
  |    :param accumulator: Value in accumulator register
  |    :param instruction_set: Instruction set from memory
  |    :param instruction_idx: Instruction index in memory
  |    :return solution: Quotient of accumulator dividend and memory value
  |
  |  multiplication(self, accumulator, instruction_set, instruction_idx) -> int
  |    Multiplies designated memory value with accumulator.
  |
  |    :param accumulator: Value in accumulator register
  |    :param instruction_set: Instruction set from memory
  |    :param instruction_idx: Instruction index in memory
  |    :return solution: Product of accumulator and memory value
  |
  |  subtraction(self, accumulator, instruction_set, instruction_idx) -> int
  |    Subtracts designated memory value from accumulator.
  |
  |    :param accumulator: Value in accumulator register
  |    :param instruction_set: Instruction set from memory
  |    :param instruction_idx: Instruction index in memory
  |    :return solution: Difference of accumulator and memory value
  |
  |  ----------------------------------------------------------------------
  |  Data descriptors inherited from ArithmeticController:
  |
  |  **dict**
  |    dictionary for instance variables (if defined)
  |
  |  **weakref**
  |    list of weak references to the object (if defined)
  |
  |  ----------------------------------------------------------------------
  |  Methods inherited from BranchController:
  |
  |  branch(self, instruction_idx) -> int
  |    Sets runtime cursor to new position.
  |
  |    :param instruction_idx: Instruction index in memory
  |    :return cursor: New position in instruction set runtime
  |
  |  branch_negative(self, cursor, accumulator, instruction_idx) -> int
  |    Sets runtime cursor to new position if accumulator is negative.
  |
  |    :param cursor: Current position in instruction set runtime
  |    :param accumulator: Value in accumulator register
  |    :param instruction_idx: Instruction index in memory
  |    :return cursor: New position in instruction set runtime
  |
  |  branch_zero(self, cursor, accumulator, instruction_idx) -> int
  |    Sets runtime cursor to new position if accumulator is zero.
  |
  |    :param cursor: Current position in instruction set runtime
  |    :param accumulator: Value in accumulator register
  |    :param instruction_idx: Instruction index in memory
  |    :return cursor: New position in instruction set runtime
  |
  |  halt(self, halted, instruction_idx) -> int
  |    Prints statement after program runtime completion.
  |
  |    :param halted: Callback function for ui
  |    :param instruction_idx: Instruction index in memory
  |    :param instruction_idx: Instruction index in memory
  |    :return cursor: Final position in instruction set runtime

---

MODULE NAME

View

DESCRIPTION

This module manages the view components.

CLASSES

- customtkinter.windows.ctk_tk.CTk(tkinter.Tk, customtkinter.windows.widgets.appearance_mode.appearance_mode_base_class.CTkAppearanceModeBaseClass, customtkinter.windows.widgets.scaling.scaling_base_class.CTkScalingBaseClass)
- UVSimGUI

  class UVSimGUI(customtkinter.windows.ctk*tk.CTk)
  |  Method resolution order:
  |    UVSimGUI
  |    customtkinter.windows.ctk_tk.CTk
  |    tkinter.Tk
  |    tkinter.Misc
  |    tkinter.Wm
  |    customtkinter.windows.widgets.appearance_mode.appearance_mode_base_class.CTkAppearanceModeBaseClass
  |    customtkinter.windows.widgets.scaling.scaling_base_class.CTkScalingBaseClass
  |    builtins.object
  |
  |  Methods defined here:
  |
  |  **init**(self)
  |    UVSimGUI initializer.
  |
  |    :param: None
  |    :return: None
  |
  |  display_values(self, accumulator: str, cursor: str) -> None
  |    Requests accumulator and cursor value to display for user.
  |
  |    :param accumulator: Value in accumulator register
  |    :param cursor: Current position in instruction set runtime
  |    :return: None
  |
  |  execute_program(self) -> None
  |    Requests program execution.
  |
  |    :param: None
  |    :return: None
  |
  |  halted(self) -> None
  |    Displays execution completion message for user.
  |
  |    :param: None
  |    :return: None
  |
  |  open_program(self, filename: str = '') -> None
  |    Requests program instruction set and displays for user.
  |
  |    :param filename: String containing file path
  |    :return: None
  |
  |  read_from_user(self) -> int
  |    Reads input from user.
  |
  |    :param: None
  |    :return value: Input value provided by user
  |
  |  reset_textbox(self, textbox: customtkinter.windows.widgets.ctk_textbox.CTkTextbox, text: str) -> None
  |    Resets specified textbox content with new text.
  |
  |    :param textbox: Textbox to be reset with new content
  |    :param text: Text to replace original textbox content
  |    :return: None
  |
  |  reset_textboxes(self) -> None
  |    Resets default textboxes for subsequent runs.
  |
  |    :param: None
  |    :return: None
  |
  |  update_program(self) -> None
  |    Updates program dialog text content.
  |
  |    :param: None
  |    :return: None
  |
  |  write_to_console(self, value: str) -> None
  |    Writes value to output for user.
  |
  |    :param: None
  |    :return value: Output value requested from memory
  |
  |  ----------------------------------------------------------------------
  |  Data and other attributes defined here:
  |
  |  **annotations** = {}
  |
  |  ----------------------------------------------------------------------
  |  Methods inherited from customtkinter.windows.ctk_tk.CTk
  |  Methods inherited from tkinter.Tk
  |  Methods inherited from tkinter.Misc
  |  Methods inherited from tkinter.Wm

  |  ----------------------------------------------------------------------
  |  Data descriptors inherited from tkinter.Misc
  |
  |  ----------------------------------------------------------------------
  |

DATA

app = <view.UVSimGUI object .>
